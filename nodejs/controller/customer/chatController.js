const geminiModel = require('../../config/geminiConfig');
const sanphamDB = require('../../model/customer/sanphamDB');

// Helper function - Ph√¢n t√≠ch intent t·ª´ tin nh·∫Øn (C·∫¨P NH·∫¨T)
function analyzeIntent(message) {
    const lowerMessage = message.toLowerCase();
    
    // Ki·ªÉm tra lo·∫°i ƒë·ªìng h·ªì (nam/n·ªØ) - ∆ØU TI√äN CAO
    let genderType = null;
    if (lowerMessage.includes('ƒë·ªìng h·ªì nam') || lowerMessage.includes('dong ho nam')) {
        genderType = 'nam';
    } else if (lowerMessage.includes('ƒë·ªìng h·ªì n·ªØ') || lowerMessage.includes('dong ho nu')) {
        genderType = 'n·ªØ';
    }
    
    // Ki·ªÉm tra lo·∫°i s·∫£n ph·∫©m chung
    const categoryKeywords = [
        { keyword: 'ƒë·ªìng h·ªì nam', search: 'ƒë·ªìng h·ªì nam' },
        { keyword: 'ƒë·ªìng h·ªì n·ªØ', search: 'ƒë·ªìng h·ªì n·ªØ' },
        { keyword: 'ƒë·ªìng h·ªì', search: 'ƒë·ªìng h·ªì' }
    ];
    
    for (let cat of categoryKeywords) {
        if (lowerMessage.includes(cat.keyword)) {
            return { 
                type: 'category', 
                keyword: cat.search,
                genderType: genderType 
            };
        }
    }
    
    // Ki·ªÉm tra t√¨m theo gi√°
    const pricePatterns = [
        /d∆∞·ªõi\s+(\d+)\s*(tri·ªáu|tr|k|ng√†n|ngh√¨n)/i,
        /t·ª´\s+(\d+)\s*(tri·ªáu|tr|k|ng√†n|ngh√¨n)\s+ƒë·∫øn\s+(\d+)\s*(tri·ªáu|tr|k|ng√†n|ngh√¨n)/i,
        /(\d+)\s*(tri·ªáu|tr|k|ng√†n|ngh√¨n)\s+ƒë·∫øn\s+(\d+)\s*(tri·ªáu|tr|k|ng√†n|ngh√¨n)/i,
        /kho·∫£ng\s+(\d+)\s*(tri·ªáu|tr|k|ng√†n|ngh√¨n)/i,
        /gi√°\s+(\d+)\s*(tri·ªáu|tr|k|ng√†n|ngh√¨n)/i
    ];
    
    for (let pattern of pricePatterns) {
        const match = lowerMessage.match(pattern);
        if (match) {
            return { 
                type: 'price', 
                match: match,
                genderType: genderType 
            };
        }
    }
    
    // Ki·ªÉm tra t√¨m theo xu·∫•t x·ª© - CH·ªà 3 QU·ªêC GIA
    const originKeywords = [
        { keyword: 'vi·ªát nam', search: 'Vi·ªát Nam' },
        { keyword: 'viet nam', search: 'Vi·ªát Nam' },
        { keyword: 'th·ª•y sƒ©', search: 'Thu·ªµ S·ªπ' },
        { keyword: 'thuy si', search: 'Thu·ªµ S·ªπ' },
        { keyword: 'trung qu·ªëc', search: 'Trung Qu·ªëc' },
        { keyword: 'trung quoc', search: 'Trung Qu·ªëc' }
    ];
    
    for (let origin of originKeywords) {
        if (lowerMessage.includes(origin.keyword)) {
            return { 
                type: 'origin', 
                keyword: origin.search,
                genderType: genderType 
            };
        }
    }
    
    // Ki·ªÉm tra h·ªèi v·ªÅ ch√≠nh s√°ch
    if (lowerMessage.includes('ch√≠nh s√°ch') || lowerMessage.includes('ƒë·ªïi tr·∫£') || 
        lowerMessage.includes('b·∫£o h√†nh') || lowerMessage.includes('giao h√†ng')) {
        return { type: 'policy' };
    }
    
    // Ki·ªÉm tra h·ªèi v·ªÅ thanh to√°n
    if (lowerMessage.includes('thanh to√°n') || lowerMessage.includes('ƒë·∫∑t h√†ng') || 
        lowerMessage.includes('mua h√†ng')) {
        return { type: 'payment' };
    }
    
    return { type: 'general' };
}

// Helper function - Chuy·ªÉn ƒë·ªïi gi√° ti·ªÅn
function parsePrice(value, unit) {
    const num = parseFloat(value);
    if (unit.includes('tri·ªáu') || unit.includes('tr')) {
        return num * 1000000;
    } else if (unit.includes('k') || unit.includes('ng√†n') || unit.includes('ngh√¨n')) {
        return num * 1000;
    }
    return num;
}

// Helper function - Format gi√° ti·ªÅn
function formatPrice(price) {
    return new Intl.NumberFormat('vi-VN', { 
        style: 'currency', 
        currency: 'VND' 
    }).format(price);
}

// Helper function - T·∫°o HTML card s·∫£n ph·∫©m (T·ªêI ∆ØU - B·ªé TH√îNG TIN TH·ª™A)
function createProductCards(products) {
    if (!products || products.length === 0) {
        return '<p style="color: #666; font-style: italic;">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.</p>';
    }
    
    let html = '<div class="ai-product-list">';
    
    products.forEach(product => {
        html += `
        <div class="ai-product-card" onclick="window.location.href='/customer/san-pham/chi-tiet/${product.ID_LoaiSanPham}/${product.ID}'">
            <div class="ai-product-image">
                <img src="/admin/image/${product.imgName}" 
                     alt="${product.TenSanPham}" 
                     onerror="this.src='/admin/image/default.jpg'">
            </div>
            <div class="ai-product-info">
                <h4 class="ai-product-name">${product.TenSanPham}</h4>
                <p class="ai-product-price">${formatPrice(product.GiaBan)}</p>
                <div class="ai-product-meta">
                    <span class="ai-product-badge">${product.LoaiSanPham}</span>
                    <span class="ai-product-badge origin">${product.XuatXu}</span>
                </div>
            </div>
        </div>`;
    });
    
    html += '</div>';
    return html;
}

// Main function - X·ª≠ l√Ω tin nh·∫Øn (C·∫¨P NH·∫¨T)
exports.sendMessage = async (req, res) => {
    try {
        const { message } = req.body;
        
        if (!message || message.trim() === '') {
            return res.json({
                success: false,
                error: 'Vui l√≤ng nh·∫≠p tin nh·∫Øn'
            });
        }

        const intent = analyzeIntent(message);
        
        // X·ª≠ l√Ω theo intent
        switch (intent.type) {
            case 'category':
                // T√¨m s·∫£n ph·∫©m theo lo·∫°i (C√ì GENDER FILTER)
                sanphamDB.getProductsByTypeForAI((products) => {
                    if (products.length > 0) {
                        const productCards = createProductCards(products);
                        let genderText = intent.genderType === 'nam' ? 'nam' : 
                                       intent.genderType === 'n·ªØ' ? 'n·ªØ' : '';
                        const summary = `üîç T√¥i t√¨m th·∫•y ${products.length} s·∫£n ph·∫©m ${intent.keyword} ${genderText}:`;
                        
                        res.json({
                            success: true,
                            response: summary,
                            products: productCards,
                            hasProducts: true,
                            timestamp: new Date().toISOString()
                        });
                    } else {
                        let genderText = intent.genderType === 'nam' ? 'nam' : 
                                       intent.genderType === 'n·ªØ' ? 'n·ªØ' : '';
                        res.json({
                            success: true,
                            response: `üòî Xin l·ªói, hi·ªán t·∫°i c·ª≠a h√†ng ch∆∞a c√≥ ${intent.keyword} ${genderText}. B·∫°n c√≥ th·ªÉ xem c√°c s·∫£n ph·∫©m kh√°c ho·∫∑c ƒë·ªÉ l·∫°i th√¥ng tin ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n khi c√≥ h√†ng.`,
                            hasProducts: false,
                            timestamp: new Date().toISOString()
                        });
                    }
                }, intent.keyword, intent.genderType);
                break;

            case 'price':
                // T√¨m s·∫£n ph·∫©m theo gi√° (C√ì GENDER FILTER)
                const match = intent.match;
                let minPrice, maxPrice;
                
                if (match[0].includes('d∆∞·ªõi')) {
                    minPrice = 0;
                    maxPrice = parsePrice(match[1], match[2]);
                } else if (match[0].includes('t·ª´') || match[0].includes('ƒë·∫øn')) {
                    minPrice = parsePrice(match[1], match[2]);
                    maxPrice = parsePrice(match[3], match[4]);
                } else if (match[0].includes('kho·∫£ng')) {
                    const price = parsePrice(match[1], match[2]);
                    minPrice = price * 0.8;
                    maxPrice = price * 1.2;
                } else {
                    const price = parsePrice(match[1], match[2]);
                    minPrice = price * 0.9;
                    maxPrice = price * 1.1;
                }
                
                sanphamDB.getProductsByPriceRangeForAI((products) => {
                    if (products.length > 0) {
                        const productCards = createProductCards(products);
                        let genderText = intent.genderType === 'nam' ? 'nam' : 
                                       intent.genderType === 'n·ªØ' ? 'n·ªØ' : '';
                        const summary = `üí∞ T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m ${genderText} trong kho·∫£ng ${formatPrice(minPrice)} - ${formatPrice(maxPrice)}:`;
                        
                        res.json({
                            success: true,
                            response: summary,
                            products: productCards,
                            hasProducts: true,
                            timestamp: new Date().toISOString()
                        });
                    } else {
                        res.json({
                            success: true,
                            response: `üòî Xin l·ªói, hi·ªán kh√¥ng c√≥ s·∫£n ph·∫©m trong kho·∫£ng gi√° n√†y. B·∫°n c√≥ th·ªÉ th·ª≠ t√¨m ki·∫øm v·ªõi m·ª©c gi√° kh√°c.`,
                            hasProducts: false,
                            timestamp: new Date().toISOString()
                        });
                    }
                }, minPrice, maxPrice, intent.genderType);
                break;

            case 'origin':
                // T√¨m s·∫£n ph·∫©m theo xu·∫•t x·ª© (C√ì GENDER FILTER)
                sanphamDB.getProductsByOriginForAI((products) => {
                    if (products.length > 0) {
                        const productCards = createProductCards(products);
                        let genderText = intent.genderType === 'nam' ? 'nam' : 
                                       intent.genderType === 'n·ªØ' ? 'n·ªØ' : '';
                        const summary = `üåç T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m ${genderText} xu·∫•t x·ª© ${intent.keyword}:`;
                        
                        res.json({
                            success: true,
                            response: summary,
                            products: productCards,
                            hasProducts: true,
                            timestamp: new Date().toISOString()
                        });
                    } else {
                        res.json({
                            success: true,
                            response: `üòî Xin l·ªói, hi·ªán kh√¥ng c√≥ s·∫£n ph·∫©m xu·∫•t x·ª© ${intent.keyword}.`,
                            hasProducts: false,
                            timestamp: new Date().toISOString()
                        });
                    }
                }, intent.keyword, intent.genderType);
                break;

            case 'policy':
                // Tr·∫£ l·ªùi v·ªÅ ch√≠nh s√°ch
                res.json({
                    success: true,
                    response: `üìã **Ch√≠nh s√°ch c·ªßa c·ª≠a h√†ng:**\n\n` +
                              `üîÑ **ƒê·ªïi tr·∫£:** Mi·ªÖn ph√≠ trong 7 ng√†y n·∫øu s·∫£n ph·∫©m l·ªói\n` +
                              `üõ°Ô∏è **B·∫£o h√†nh:** 12 th√°ng ch√≠nh h√£ng\n` +
                              `üöö **Giao h√†ng:** Mi·ªÖn ph√≠ n·ªôi th√†nh, 2-3 ng√†y\n` +
                              `üí≥ **Thanh to√°n:** H·ªó tr·ª£ MoMo, VNPay, COD\n\n` +
                              `B·∫°n mu·ªën bi·∫øt th√™m chi ti·∫øt?`,
                    hasProducts: false,
                    timestamp: new Date().toISOString()
                });
                break;

            case 'payment':
                // H∆∞·ªõng d·∫´n thanh to√°n
                res.json({
                    success: true,
                    response: `üí≥ **H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng:**\n\n` +
                              `1Ô∏è‚É£ Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng\n` +
                              `2Ô∏è‚É£ V√†o gi·ªè h√†ng ‚Üí "ƒê·∫∑t h√†ng"\n` +
                              `3Ô∏è‚É£ ƒêi·ªÅn th√¥ng tin giao h√†ng\n` +
                              `4Ô∏è‚É£ Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n\n\n` +
                              `C·∫ßn h·ªó tr·ª£ g√¨ th√™m kh√¥ng?`,
                    hasProducts: false,
                    timestamp: new Date().toISOString()
                });
                break;

            default:
                // S·ª≠ d·ª•ng Gemini AI
                const prompt = `
B·∫°n l√† tr·ª£ l√Ω AI c·ªßa c·ª≠a h√†ng ƒë·ªìng h·ªì.

Th√¥ng tin:
- S·∫£n ph·∫©m: ƒê·ªìng h·ªì nam, ƒê·ªìng h·ªì n·ªØ
- Xu·∫•t x·ª©: Vi·ªát Nam, Th·ª•y Sƒ©, Trung Qu·ªëc
- Thanh to√°n: MoMo, VNPay, COD
- B·∫£o h√†nh 12 th√°ng, ƒë·ªïi tr·∫£ 7 ng√†y

C√¢u h·ªèi: ${message}

Tr·∫£ l·ªùi ng·∫Øn g·ªçn (2-3 c√¢u) b·∫±ng ti·∫øng Vi·ªát.
`;

                geminiModel.generateContent(prompt)
                    .then(result => {
                        const text = result.response.text();
                        res.json({
                            success: true,
                            response: text,
                            hasProducts: false,
                            timestamp: new Date().toISOString()
                        });
                    })
                    .catch(error => {
                        console.error('Gemini Error:', error);
                        res.json({
                            success: true,
                            response: 'üí° B·∫°n c√≥ th·ªÉ t√¨m ki·∫øm:\n' +
                                     '‚Ä¢ ƒê·ªìng h·ªì nam/n·ªØ\n' +
                                     '‚Ä¢ Theo gi√° (VD: "d∆∞·ªõi 5 tri·ªáu")\n' +
                                     '‚Ä¢ Theo xu·∫•t x·ª© (VD: "h√†ng Th·ª•y Sƒ©")',
                            hasProducts: false
                        });
                    });
                break;
        }

    } catch (error) {
        console.error('Chat Error:', error);
        res.json({
            success: false,
            error: 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.',
            timestamp: new Date().toISOString()
        });
    }
};